class ResourcePool
  constructor: (@_resources) ->
    @CLIENT_ID_LENGTH = 9
    @_queue = []
    @_closed = false
    @_clientRequests = {}

  # Get a new client ID for purposes of selectively manipulating jobs in the queue
  # If a prefix is given, the client ID will have the specified string as a prefix
  acquireClientID: (prefix = "") ->
    id = null
    while !id? || @_clientRequests[id]?
      id = prefix + Math.round(Math.random() * Math.pow(10, @CLIENT_ID_LENGTH))
    @_clientRequests[id] = []
    return id

  # Release a client ID and reject all its pending requests for resources generated by acquire
  releaseClientID: (clientID) ->
    for request in @_clientRequests[clientID] ? []
      request.reject() # If the state is not pending at this time, this function has no effect
    delete(@_clientRequests[clientID])

  # Acquire a resource if one is available, or wait until one is free.
  # If a client ID is given (generated by acquireClientID), the request will be assigned to
  # that ID and will be rejected if the client ID is released prematurely.
  # Returns a Deferred object that will be resolved when the resource is given.
  acquire: (clientID) ->
    request = $.Deferred()
    if @_resources.length > 0 && !@_closed
      resource = @_resources.shift()
      request.resolve(resource)
    else
      @_queue.push(request)
      if clientID? && @_clientRequests[clientID]?
        @_clientRequests[clientID].push(request)
    return request

  # Closes the resource pool, such that no more resources can be acquired.
  close: () ->
    @_closed = true

  getNumberAvailable: () ->
    return if @_closed then 0 else @_resources.length

  # Releases a resource to be used by another entity. If there's a backlog of acquire
  # requests, the oldest one will be served with the newly released resource directly.
  # Otherwise the resource is returned to the pool of available resources.
  release: (resource, clientID) ->
    request = null
    if !@_closed
      while @_queue.length > 0 && (!request? || request.state() != "pending")
        request = @_queue.shift()
    if request?
      request.resolve(resource)
    else
      @_resources.push(resource)

  # Opens the resource pool, which will immediately release all available resources
  open: () ->
    return unless @_closed
    @_closed = false

    for resource in @_resources
      @release(resource)

  # Clear the queue of all pending requests for resources and wipe all client IDs
  clear: () ->
    @_clientRequests = {}
    @_queue = []

module.exports = ResourcePool
